type BridgeEvent = variant {
  UnfreezeNftBatch : UnfreezeNftBatch;
  UnfreezeNft : UnfreezeNft;
  TransferNft : TransferNft;
  TransferNftBatch : TransferNftBatch;
};
type BridgeEventCtx = record {
  to : text;
  action_id : nat;
  tx_fee : nat64;
  chain_nonce : nat64;
};
type Config = record {
  event_cnt : nat;
  fee_public_key : vec nat8;
  chain_nonce : nat64;
  group_key : vec nat8;
  paused : bool;
};
type KeyType = variant { FeeKey; BridgeGroupKey };
type TransferNft = record {
  dip721_contract : principal;
  token_id : nat;
  mint_with : text;
  caller : principal;
  token_data : text;
};
type TransferNftBatch = record {
  dip721_contract : principal;
  token_datas : vec text;
  mint_with : text;
  caller : principal;
  token_ids : vec nat;
};
type UnfreezeNft = record {
  uri : text;
  token_id : nat;
  caller : principal;
  burner : principal;
};
type UnfreezeNftBatch = record {
  uris : vec text;
  caller : principal;
  token_ids : vec nat;
  burner : principal;
};
type ValidateCleanLogs = record { action_id : nat };
type ValidateSetGroupKey = record { group_key : vec nat8 };
type ValidateSetPause = record { pause : bool };
type ValidateTransferNft = record {
  to : principal;
  mint_with : principal;
  token_url : text;
};
type ValidateTransferNftBatch = record {
  to : principal;
  mint_with : vec principal;
  token_urls : vec text;
};
type ValidateUnfreezeNft = record {
  to : principal;
  dip_contract : principal;
  token_id : nat;
};
type ValidateUnfreezeNftBatch = record {
  to : principal;
  dip_contracts : vec principal;
  token_ids : vec nat;
};
type ValidateWhitelistDip721 = record { dip_contract : principal };
type ValidateWithdrawFees = record { to : principal };
type ValidatedEvent = variant {
  ValidatedPause : record { paused : bool };
  ValidatedUpdateKey : record { key : vec nat8; key_type : KeyType };
  ValidatedUnfreeze : record {
    to : principal;
    token_id : nat;
    contract : principal;
  };
  ValidatedUnfreezeBatch : record {
    to : principal;
    contracts : vec principal;
    token_ids : vec nat;
  };
  ValidatedMintBatch : record {
    mint_with : vec principal;
    token_ids : vec nat32;
  };
  ValidatedMint : record { token_id : nat32; mint_with : principal };
  ValidatedFeeWithdraw : record { to : principal; block_index : nat64 };
};
service : (vec nat8, vec nat8, nat64, vec text) -> {
  add_whitelist : (nat, ValidateWhitelistDip721, vec nat8) -> ();
  clean_logs : (nat, ValidateCleanLogs, vec nat8) -> ();
  encode_transfer_tx : (nat8, nat8, text, nat, nat) -> (vec nat8) query;
  encode_validate_transfer_nft : (nat, ValidateTransferNft) -> (vec nat8) query;
  encode_validate_transfer_nft_batch : (nat, ValidateTransferNftBatch) -> (
    vec nat8
  ) query;
  encode_validate_unfreeze_nft : (nat, ValidateUnfreezeNft) -> (vec nat8) query;
  encode_validate_unfreeze_nft_batch : (nat, ValidateUnfreezeNftBatch) -> (
    vec nat8
  ) query;
  encode_withdraw_fees : (nat, ValidateWithdrawFees) -> (vec nat8) query;
  freeze_nft : (nat64, principal, nat, nat64, text, text, vec nat8) -> (nat);
  freeze_nft_batch : (
    nat64,
    principal,
    vec nat,
    nat64,
    text,
    text,
    vec nat8,
  ) -> (nat);
  get_config : () -> (Config) query;
  get_event : (nat) -> (opt record { BridgeEventCtx; BridgeEvent }) query;
  get_validated_event : (nat) -> (opt ValidatedEvent) query;
  is_whitelisted : (principal) -> (bool) query;
  set_fee_group_key : (nat, ValidateSetGroupKey, vec nat8) -> (nat32);
  set_group_key : (nat, ValidateSetGroupKey, vec nat8) -> (nat32);
  set_pause : (nat, ValidateSetPause, vec nat8) -> (nat32);
  validate_transfer_nft : (nat, ValidateTransferNft, vec nat8) -> (nat32);
  validate_transfer_nft_batch : (nat, ValidateTransferNftBatch, vec nat8) -> ();
  validate_unfreeze_nft : (nat, ValidateUnfreezeNft, vec nat8) -> (nat32);
  validate_unfreeze_nft_batch : (nat, ValidateUnfreezeNftBatch, vec nat8) -> (
    nat32
  );
  withdraw_fees : (nat, ValidateWithdrawFees, vec nat8) -> (nat32);
  withdraw_nft : (nat64, principal, nat, nat64, text, vec nat8) -> (nat);
  withdraw_nft_batch : (nat64, principal, vec nat, nat64, text, vec nat8) -> (
    nat
  );
};
